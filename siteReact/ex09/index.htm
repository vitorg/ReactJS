<!-- index.html -->
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <title>React - Example 9</title>
    <link rel="stylesheet" type="text/css" href="style.css">
    <!--<script src="https://cdnjs.cloudflare.com/ajax/libs/react/0.13.3/react.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/0.13.3/JSXTransformer.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/marked/0.3.2/marked.min.js"></script>-->
    <script src="./lib/react.js"></script>
    <script src="./lib/JSXTransformer.js"></script>
    <script src="./lib/jquery.min.js"></script>
    <script src="./lib/marked.min.js"></script>
    <style type="text/css">
      .red {
        color: red;
      }
    </style>
  </head>
  <body>
    <hr />
    <h1>Load JSON from server (a server is required!)</h1>
    <h4>Adding new comments</h4>
    <h4 class="red">> Updates from server every 50 seconds <</h4>
    <hr />
    <br />

    <div id="content"></div>

    <!-- in JSX -->
    <script type="text/jsx">

      var Comment = React.createClass({
        render: function() {
          var rawMarkup = marked(this.props.children.toString(), {sanitize: true});
          return (
            <div className="comment">
              <h2 className="commentAuthor">
                {this.props.author}
              </h2>
              <span dangerouslySetInnerHTML={{__html: rawMarkup}} />
            </div>
          );
        }
      });

      var CommentList = React.createClass({
        render: function() {
          var commentNodes = this.props.data.map(function (comment, index) {
            return (
              <Comment 
                key={index}
                author={comment.author}>
                {comment.text}
              </Comment>
            );
          });
          return (
            <div className="commentList">
              {commentNodes}
            </div>
          );
        }
      });

      var CommentForm = React.createClass({
        handleSubmit: function(e) {
          e.preventDefault();
          var author = React.findDOMNode(this.refs.author).value.trim();
          var text = React.findDOMNode(this.refs.text).value.trim();
          if (!text || !author) {
            return;
          }
          this.props.onCommentSubmit({author: author, text: text});
          React.findDOMNode(this.refs.author).value = '';
          React.findDOMNode(this.refs.text).value = '';
          return;
        },
        render: function() {
          return (
            <form className="commentForm" onSubmit={this.handleSubmit}>
              <input type="text" placeholder="Your name" ref="author" />
              <input type="text" placeholder="Say something..." ref="text" />
              <input type="submit" value="Post" />
            </form>
          );
        }
      });

      
      var CommentBox = React.createClass({
        loadCommentsFromServer: function() {
          $.ajax({
            url: this.props.url,
            dataType: 'json',
            type: 'POST',
            cache: false,
            success: function(data) {
              this.setState({data: data.comments});
            }.bind(this),
            error: function(xhr, status, err) {
              console.error(this.props.url, status, err.toString());
            }.bind(this)
          });
        },
        handleCommentSubmit: function(comment) {
          var comments = this.state.data;
          var newComments = comments.concat([comment]);
          this.setState({data: newComments});
          $.ajax({
            url: this.props.url,
            dataType: 'json',
            type: 'POST',
            data: comment,
            success: function(data) {
              console.log("data from server: " + JSON.stringify(data));
              if( data.length >= newComments.length || this.props.url.indexOf(".php") >= 0/*se for PHP só gurda o último comentário...*/ ) // if the server is simple a static JSON file the response will be allowais the same...
                this.setState({data: data.comments}); // in case of server processes the request
              else
                this.setState({data: newComments}); // in case server is a static JSON file
            }.bind(this),
            error: function(xhr, status, err) {
              console.error(this.props.url, status, err.toString());
            }.bind(this)
          });
        },
        getInitialState: function() {
          return {data: []};
        },
        componentDidMount: function() {
          this.loadCommentsFromServer();
          setInterval(this.loadCommentsFromServer, this.props.pollInterval);
        },
        render: function() {
          return (
            <div className="commentBox">
              <h1>Comments</h1>
              <CommentList data={this.state.data} />
              <CommentForm onCommentSubmit={this.handleCommentSubmit} />
            </div>
          );
        }
      });

      //how to user servers:
      //JSON --> http://localhost:8090/react/ex09/index.htm
      //PHP --> http://localhost:8090/react/ex09/index.htm
      //node --> http://localhost:8888/index.htm
        //    -> run: cd prjPath; node nodeServer.js
      React.render(
        <CommentBox url=/*"comments.json"*/"server.php"/*"localhost/server"*/ pollInterval={50000} />,
        document.getElementById('content')
      );
    </script>

  </body>
</html>